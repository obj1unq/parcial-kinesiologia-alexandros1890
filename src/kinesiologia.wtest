import kinesiologia.*

describe "group of tests" {

//**************************objetos para puntos 1 y 2*********************************/
//TODO: El valor por default corresponde que esté en la inicialización dentro de la clase (donde se define la variable)
	var magneto = new Magneto (color=blanco)
	var bicicleta =new Bicicleta(color=blanco)
	var minitramp = new Minitramp(color=blanco)
	
	//un paciente común de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicleta , magento.
	var leo = new Paciente (edad = 40, fortaleza = 20, dolor = 10,rutina= [bicicleta, minitramp, bicicleta , magneto])

	//una paciente comun de 3 años, dolor 30, fortaleza,  50 rutina = magneto, bicicleta 
	var milena = new Paciente(edad = 3, fortaleza = 50, dolor = 30,rutina = [magneto, bicicleta])

//**************************objetos para puntos 3*********************************/
//
	var nico=new Resistente(edad = 40, fortaleza = 20, dolor = 10, rutina = [bicicleta, minitramp, bicicleta , magneto])
//	//un paciente Resistente de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicleta , magento.
//	//(misma configuracion para leo, pero siendo resistente)
//	var nico //TODO
//
	var victoria = new Caprichoso(edad = 40, fortaleza = 20, dolor = 10, rutina = [bicicleta, minitramp, bicicleta , magneto])
//	//un paciente Caprichosa de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicleta , magento.
//	//todos los aparatos son blancos 
//	//(mismo que leo)	
//	var victoria //TODO
//	
	var bicicletaRoja=new Bicicleta(color=rojo) 
//	//un paciente Caprichosa de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicletaRoja , magento.
//	//todos los aparatos son blancos menos la segunda bicicleta que es roja
//	//(mismo que leo)	
	var andrea = new Caprichoso (edad = 40, fortaleza = 20, dolor = 10, rutina = [bicicleta, minitramp, bicicletaRoja , magneto])
//	
////3.3	
//	//un paciente De Rapida Recuperacion 
//	//un paciente Resistente de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicleta , magento.
//	//(misma configuracion para leo)
	var zoe = new RapidaRecuperacion(edad = 40, fortaleza =20, dolor = 10, rutina = [bicicleta, minitramp, bicicleta , magneto])
//
//**************************objetos para puntos 4*********************************/
//	//un centro que tiene como aparatos al magneto, la bicicleta, la bicicleta roja y el minitramp
//	//y como pacientes a leo, milena, nico, victoria, andrea y zoe 
	var centro =new CentroKinesio(aparatos = [bicicleta,bicicletaRoja,minitramp], pacientes = #{leo, milena, nico, victoria, andrea, zoe} )

	
//***********************Punto 1*************************************
	test "usar magneto leo" {
		assert.that(leo.puedeUsarAparato(magneto))	
		leo.usarAparato(magneto)
		assert.equals(9, leo.dolor())	
	} 	

	test "usar magneto milena" {
		assert.that(magneto.puedeUsarlo(milena))	
		milena.usarAparato(magneto)
		assert.equals(27, milena.dolor())		
	}
	
	test "usar bicicleta leo" {
		assert.that(bicicleta.puedeUsarlo(leo))	
    	leo.usarAparato(bicicleta)
		assert.equals(6, leo.dolor())		
		assert.equals(23, leo.fortaleza())		
	} 	
//
	test "usar bicicleta milena" {
		assert.notThat(bicicleta.puedeUsarlo(milena))	
		//TODO: Esto debería lanzar un error
		milena.usarAparato(magneto)
	}
//	
	test "usar minitramp leo" {
		assert.that(minitramp.puedeUsarlo(leo))	
		leo.usarAparato(minitramp)
		assert.equals(24, leo.fortaleza())		
//TODO: Desconmento esta llave porque no compilaba el test
	} 	
//
	test "usar minitramp milena" {
		assert.notThat(bicicleta.puedeUsarlo(milena))	
			//TODO: Esto debería lanzar un error
		milena.usarAparato(minitramp)
		
	}
//***********************Punto 2*************************************
	test "sesion leo" {
		assert.that(leo.puedeRealizarRutina())	
		leo.realizarRutina()
		assert.equals(1.8, leo.dolor()) //10 -4 -4 - 0.2 =  1.8		
		assert.equals(30, leo.fortaleza()) //20	+ 3 + 4 + 3	
	}	
//	
	test "sesion milena" {
		assert.notThat(milena.puedeRealizarRutina())	
		/* milena hace la sesion (cosa que no puede hacer) */
		//TODO: Se debería probar que se lanza un error cuando se le pide a milena que realice la rutina
		
	}	
//
//***********************Punto 3*************************************//
	test "sesion nico (resistente)" {
	 	assert.that(nico.puedeRealizarRutina())	
		nico.realizarRutina()
		assert.equals(1.8, nico.dolor()) //10 -4 -4 - 0.2 =  1.8		
		assert.equals(34, nico.fortaleza()) //20	+ 3 + 4 + 3	+ 4
	}
//	
	test "sesion victoria (caprichosa sin aparato rojo)" {
	 	assert.notThat(victoria.puedeRealizarRutina())	
		assert.throwsException({victoria.realizarRutina()})
	}		
//
	test "sesion andrea (caprichosa con aparato rojo)" {
		assert.that(andrea.puedeRealizarRutina())	
		andrea.realizarRutina()
		assert.equals(-5.58, andrea.dolor()) 	//10 -4 -4 - 0.2 -4 -4  -(-0.62)
		assert.equals(40, andrea.fortaleza()) //20	+ 3 + 4 + 3	+ 3 + 4 + 3	  
	}		
	
	test "sesion zoe (resistente)" {

		nivelDolor.cambiarValor(1)
		assert.that(zoe.puedeRealizarRutina())	
		zoe.realizarRutina()

		assert.equals(0.8, zoe.dolor()) //10 -4 -4 - 0.2 -1  =  0.8		
		assert.equals(30, zoe.fortaleza()) //20	+ 3 + 4 + 3	
	}
//***********************Punto 4*************************************
	test "colores" {
		assert.equals(#{rojo,blanco}, centro.coloresDeAparatos())		
	}
//
	test "pacientes chiquitos" {
		assert.equals(#{milena}, centro.pacientesChicos())	
	}	
//
	test "cuantos no pueden cumplir la sesion" {
		assert.equals(2, centro.noPuedenCumplirRutina()) //no pueden milena y victoria = 2	
	}	
	
}